#include <conio.h>
#include <cstdlib>
#include <iostream>
#include <ctime>
#include <string.h>
#include <stdio.h>
#include <windows.h>

using namespace std;

struct gra
{

    char nazwa_gry[40];
    int ocena_graczy;
    float cena_gry;
    int kod_producenta;
};

bool zapisDoPliku(gra magazyn[], int liczba_danych);
bool czytanieZPliku(gra magazyn[], int &liczba_danych);
void losuj(gra magazyn[], int liczba_danych);
void wypisz(gra towary[], int ile);
void przecena(gra magazyn[], int liczba_danych, float procent);
void wyszukajCena(gra magazyn[], int ile_danych, gra wyszukane[], int &ile_wyszukanych, float min, float max);
void sortowanieWyb(gra magazyn[],int liczba_danych,int jak);
void minmaxCena(gra magazyn[], int liczba_danych, float &min, float &max);
void dodajTowar(gra magazyn[], gra nowy, int &liczba_danych);
int znajdzNazw(gra magazyn[],int liczba_danych,string &szukNazwa, gra wyszukane[]);
void sortowanieNazw(gra magazyn[],int liczba_danych,int jak);
void readme();
int main()
{
    gra *stan_magazynowy,*wyszukane,nowy;
    float minimum, maksimum, procent;
    int rozmiar=0, liczba_danych=0, liczba_wyszukanych=0,wybor;
    char znak;

        cout<<"Jaki rozmiar magazynu? ";
        while(!(cin>>rozmiar)||rozmiar<=0)
        {
            cout<<"Niepoprawne dane!";
            cin.clear();
            cin.sync();
        }
        stan_magazynowy =new gra[rozmiar+1];	//powiekszony o 1
        wyszukane=new gra[rozmiar+1];	//Przygotowanie tablicy na towary wyszukane
    do
    {
        cout<<endl<<endl<<"NACISNIJ ENTER"<<endl;

		getchar();
	    system("CLS");
		cout<<"1. Losowanie calego magazynu"<<endl;
	    cout<<"2. Sortowanie po nazwie rosnaco"<<endl;
	   	cout<<"3. Sortowanie wedlug ceny"<<endl;
	   	cout<<"4. Dopisanie towaru do magazynu"<<endl;
	    cout<<"5. Wypisanie elementow tablicy"<<endl;
	    cout<<"6. Wyszukaj po nazwie"<<endl;
	    cout<<"7. Wypisanie tablicy przefiltrowanej"<<endl;
	    cout<<"8. Maksymalna i minimalna cena"<<endl;
		cout<<"9. Zmiana ceny o podany procent"<<endl;
		cout<<"a. Wyszukiwanie wedlug przedzialu cen"<<endl;
		cout<<"z. Zapis do pliku"<<endl;
		cout<<"c. Wczytaj do pliku"<<endl;
		cout<<"r. Wyswietl plik readme"<<endl;
	    cout<<"ESC. ---KONIEC PRACY---"<<endl<<endl;
	    znak=getch();
	    switch(znak)
	    {


                case '1': 	cout<<"Ile danych losowac? ";
                            while(!(cin>>liczba_danych)||liczba_danych<=0||liczba_danych>rozmiar)
                            {
                            cout<<"Niepoprawne dane!";
                            cin.clear();
                            cin.sync();
                            }
                            losuj(stan_magazynowy, liczba_danych);
                            cout<<endl<<"Wylosowano"<<endl;
                            break;

                case '2':   cout<<"Sortowanie po nazwie:";
                            sortowanieNazw(stan_magazynowy,liczba_danych,1);
                            break;

                case '3':
                            cout<<"Chcesz posorotowac:"<<endl<<"1)malejaco"<<endl<<"2)rosnaco"<<endl;
                            while(!(cin>>wybor) || (wybor != 1  && wybor != 2))
                            {
                               cout<<"Niepoprawne dane!";
                                cin.clear();
                                cin.sync();
                            }
                            sortowanieWyb(stan_magazynowy, liczba_danych, wybor);
                            cout<<"Posortowano wedlug ceny"<<endl;
                            break;
                case '4':	if(rozmiar>liczba_danych)
                            {
                            cout<<"Nazwa: ";
                            cin>>nowy.nazwa_gry;
                            cout<<"Cena: ";
                            while((!(cin>>nowy.cena_gry) || nowy.cena_gry<=0 || nowy.cena_gry>1000))
                            {
                                cout<<"Niepoprawne dane wprowadz dane ponownie!"<<endl<<"Cena: ";
                                cin.clear();
                                cin.sync();
                            }
                            cout<<"Ocena graczy: ";
                            while((!(cin>>nowy.ocena_graczy)||(nowy.ocena_graczy<0||nowy.ocena_graczy>100)))
                            {
                                cout<<"Niepoprawne dane wprowadz dane ponownie!"<<endl<<"Ocena graczy: ";
                                cin.clear();
                                cin.sync();
                            }
                            while((!(cin>>nowy.kod_producenta) || nowy.kod_producenta<20000 || nowy.kod_producenta>100000))
                            {
                                cout<<"Niepoprawne dane kod producenta zawiera sie miedzy 20000 a 100000!"<<endl<<"Kod producenta: ";
                                cin.clear();
                                cin.sync();
                            }
                            dodajTowar(stan_magazynowy, nowy, liczba_danych);
                            cin.ignore();
                            cout<<"Dopisany"<<endl;
                            }
                            else
                                cout<<"nie mozna dopisac wiecej do magazynu, przekroczono limit";
                            break;

                case '5':	cout<<"Element \t"<<"Nazwa gry\t"<<"Ocean graczy\t\t Cena gry \t\t Kod producenta"<<endl;
                            wypisz(stan_magazynowy, liczba_danych);
                            cout<<endl;
                            break;

                case '6':   cout<<"Wpisz dokladnie szukana nazwe: ";
                            string szukNazwa;
                            cin>>szukNazwa;
                            liczba_wyszukanych = znajdzNazw(stan_magazynowy, liczba_danych, &szukNazwa, wyszukane);
                            if(liczba_wyszukanych<0)
                                cout<<"Znaleziono "<<liczba_wyszukanych<<" produktow.";
                            else
                                cout<<"Nie znaleziono zadnych wynikow"<<endl;
                            break;

                case '7':   cout<<"Element \t"<<"Nazwa gry\t"<<"Ocean graczy\t\t Cena gry \t\t Kod producenta"<<endl;
                            wypisz(wyszukane, liczba_wyszukanych);
                            cout<<endl;
                            break;

                case '8': 	minmaxCena(stan_magazynowy, liczba_danych, &minimum, &maksimum);
                            cout<<"Cena minimalna= "<<minimum<<"  Cena maksymalna= "<<maksimum<<endl;
                            break;

                case '9': 	cout<<"O jaki procent przeceniasz? (ujemny obniza): ";
                            while(!(cin>>procent) || procent<-100)
                            {
                                cout<<"Niepoprawne dane wprowadz ponownie!";
                                cin.clear();
                                cin.sync();
                                cout<<endl<<"O jaki procent przeceniasz? (ujemny obniza): ";
                            }
                            przecena(stan_magazynowy, liczba_danych, procent);
                            cout<<"Przecenione o "<<procent<<"%"<<endl;
                            break;

                case 'a':	cout<<"Podaj przedzial szukany."<<endl<<"od wartosci: ";
                            while((!(cin>>minimum)||minimum<0))
                            {
                                cout<<"Niepoprawne dane wprowadz ponownie!"<<endl<<"od wartosci: ";
                                cin.clear();
                                cin.sync();
                            }
                            cout<<"do wartosci: ";
                            while((!(cin>>maksimum)||maksimum<minimum))
                            {
                                cout<<"Niepoprawne dane wprowadz ponownie!"<<endl<<"do wartosci: ";
                                cin.clear();
                                cin.sync();
                            }
                            wyszukajCena(stan_magazynowy, liczba_danych, wyszukane, &liczba_wyszukanych, minimum, maksimum);
                            wypisz(wyszukane, liczba_wyszukanych);
                            cout<<endl;
                            break;

                case 'z':   if(true==(zapisDoPliku(stan_magazynowy,liczba_danych)))
                                cout<<"zapisano do pliku magazyn.dat"<<endl;
                            else
                                cout<<"wystapil blad zapisu do pliku"<<endl;
                            break;

                case 'c':   if(true==(czytanieZPliku(stan_magazynowy, &liczba_danych)))
                            cout<<"odczyt udany"<<endl;
                            else
                                cout<<"cos poszlo nie tak, sprawdz czy plik istnieje"<<endl;
                            break;

                case 'r':   system("cls");
                            readme();
                            break;

	    }
    }while(znak!=27);


    cout<<endl<<"NACISNIJ KLAWISZ BY ZAKONCZYC"<<endl;
    delete [] stan_magazynowy;
    delete [] wyszukane;

}


void losuj(gra magazyn[], int liczba_danych)
{
 	char naz[20], numer[13];
 	string miasto;
	srand(time(NULL));
 	for (int i=1; i<=liczba_danych; i++)
 	{
        strcpy(naz, "Gra");
		itoa(i, numer, 10);
		strcat(naz, numer);
        strcpy(magazyn[i].nazwa_gry, naz);
		magazyn[i].ocena_graczy=rand()%25+75;
        magazyn[i].cena_gry=rand()%150+100;
        magazyn[i].kod_producenta=rand()%70000+23450;
    }
}

void wypisz(gra towary[], int ile)
{
	for (int i=1; i<=ile; i++)    //od indeksu 1 do liczba_danych
   		 cout<<i<<". \t\t  "<<towary[i].nazwa_gry<<"\t\t    "<<towary[i].ocena_graczy
		<<"%\t\t\t  "<<towary[i].cena_gry<<"PLN \t\t     "<<towary[i].kod_producenta<<endl;
}

void dodajTowar(gra magazyn[], gra nowy, int &liczba_danych)
{
	liczba_danych++;
	magazyn[liczba_danych]=nowy;
}

void minmaxCena(gra magazyn[], int liczba_danych, float &min, float &max)
{
	min=magazyn[1].cena_gry;
	max=magazyn[1].cena_gry;
	for (int i=2; i<=liczba_danych; i++)
    	if (magazyn[i].cena_gry<min)
		  min=magazyn[i].cena_gry;
		else
			if (magazyn[i].cena_gry>max)
			  max=magazyn[i].cena_gry;
}

void przecena(gra magazyn[], int liczba_danych, float procent)	//przecena wszystkich towarów
{
	for (int i=1; i<=liczba_danych; i++)
		magazyn[i].cena_gry+=magazyn[i].cena_gry * procent/100;
}

void wyszukajCena(gra magazyn[], int ile_danych, gra wyszukane[], int &ile_wyszukanych, float min, float max)
{
	int i;
	ile_wyszukanych=0;
	for (i=0; i<ile_danych; i++)
		if (magazyn[i].cena_gry>=min && magazyn[i].cena_gry<=max)
		{
			ile_wyszukanych++;
			wyszukane[ile_wyszukanych]=magazyn[i];
		}

}
void sortowanieWyb(gra magazyn[],int liczba_danych,int jak)
{
    int x;
    for(int i=1;i<liczba_danych;i++)
    {
        x = i;
        if(jak==2)
        {
        for(int j = i+1;j <= liczba_danych;j++)
        if(magazyn[j].cena_gry<magazyn[x].cena_gry)
            x = j;
        swap(magazyn[x],magazyn[i]);
        }
        else
        {
            for(int j = i+1;j <= liczba_danych;j++)
        if(magazyn[j].cena_gry>magazyn[x].cena_gry)
            x = j;
        swap(magazyn[i],magazyn[x]);
        }

    }
}

void sortowanieNazw(gra magazyn[],int liczba_danych,int jak)
{
    gra pom;
    int p=1;
    for(int j=1; j<liczba_danych; j++)
    {
        for (int i=1; i<liczba_danych; i++)
        {
                if (strcmp (magazyn[i].nazwa_gry, magazyn[i+1].nazwa_gry) > 0)
                    {
                        pom=magazyn[i];
                        magazyn[i]=magazyn[i+1];
                        magazyn[i+1]=pom;
                    }
        }
    }


}

int znajdzNazw(gra magazyn[],int liczba_danych,string &szukNazwa, gra wyszukane[])
{
    int ileZnalezionych = 0;
    for(int i = 1;i<=liczba_danych;i++)
    {

        if(strcmp(magazyn[i].nazwa_gry,szukNazwa) == 0)
        {
            ileZnalezionych++;
            wyszukane[ileZnalezionych]=magazyn[i];
        }

    }

    return ileZnalezionych;
}


void readme()
{
    char palec;
    FILE *read;
    read = fopen("readme.txt", "r");
    do
    {
        palec = fgetc(read);
        cout << palec;
        Sleep(20);
    }
    while(palec != EOF);
    fclose(read);
}

bool zapisDoPliku(gra magazyn[], int liczba_danych)
{
    FILE *fp=fopen("magazyn.txt","wb");
    if(!fp)
        return false;
    else
    {
        fwrite(&liczba_danych,sizeof(liczba_danych), 1, fp);
        for(int i=1;i<=liczba_danych;i++)
            fwrite(&magazyn[i],sizeof(magazyn[i]), 1, fp);
            fclose(fp);
            return true;
    }
}

bool czytanieZPliku(gra magazyn[], int *liczba_danych)
{
    FILE *fp=fopen("magazyn.txt","rb");
    if(!fp)
        return false;
    fread(liczba_danych,sizeof(*liczba_danych), 1, fp);
    for(int i=1;i<=*liczba_danych;i++)
        fread(&magazyn[i],sizeof(magazyn[i+1]), 1, fp);
    fclose(fp);
    return true;
}
